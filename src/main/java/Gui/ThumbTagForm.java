/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui;

import DataStructures.ImageWrapper;
import IO.ImageSQLHandler;
import Algorithms.TagAlgorithms;
import Main.Main;
import java.awt.Font;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Peter
 */
public class ThumbTagForm extends javax.swing.JFrame {

    public ArrayList<ImageWrapper> selectedImages = new ArrayList<>();
    ThumbForm parent;

    public ThumbTagForm(ThumbForm p) {
        parent = p;
        initComponents();
        loadComboBox();
    }

    public void reload() {
        selectedImages = parent.tlp.returnSelected();
        this.selectedItemsCountLabel.setText(selectedImages.size() + "");
        if (calculateSuggestions.isSelected()) {
            suggestions();
        }
    }

    private void loadComboBox() {
        try {
            model.removeAllElements();
            ImageSQLHandler.getTagQuery().beforeFirst();

            while (ImageSQLHandler.getTagQuery().next()) {
                model.addElement(ImageSQLHandler.getTagQuery().getString("name"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(InfoWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void suggestions() {
        this.suggestionListModel.clear();
        HashMap<String, Integer> tags = new HashMap<>();
        //Set<Map.Entry<String, Double>> Suggestions = null;
        Set<Map.Entry<String, Double>> computeSuggestions = null;
        for (ImageWrapper image : selectedImages) {
            if (image == null) {
                continue;
            }
            for (String s : ImageSQLHandler.getImageTags(image.getPath())) {
                tags.put(s, tags.getOrDefault(s, 0) + 1);
            }
        }
        computeSuggestions = Main.getTagAlgorithms().computeSuggestionsForTagList(tags, selectedImages.size());
        if (computeSuggestions == null) {
            return;
        }
        Iterator<Map.Entry<String, Double>> next = computeSuggestions.iterator();
        while (next.hasNext()) {
            Map.Entry<String, Double> entry = next.next();
            if (entry.getValue() >= 0.01) {
                this.suggestionListModel.addElement(entry.getKey() + ", " + entry.getValue().toString().subSequence(0, 3));
            }

        }
        this.selectedItemsCountLabel.setText(selectedImages.size() + "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectionComboBox = new javax.swing.JComboBox<>(model);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectedItemsCountLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        suggestionList = new javax.swing.JList<>(suggestionListModel);
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagBox = new javax.swing.JList<>(tagListModel);
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        calculateSuggestions = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        tagMenu = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        copySlot1 = new javax.swing.JMenuItem();
        copySlot2 = new javax.swing.JMenuItem();
        copySlot3 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        pasteSlot1 = new javax.swing.JMenuItem();
        pasteSlot2 = new javax.swing.JMenuItem();
        pasteSlot3 = new javax.swing.JMenuItem();
        resetTagSlots = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        selectionComboBox.setEditable(true);
        AutoCompleteDecorator.decorate(selectionComboBox);
        selectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tags");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Selected items: ");

        selectedItemsCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selectedItemsCountLabel.setText("0");

        jScrollPane3.setViewportView(suggestionList);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Compound Suggestions");

        jButton1.setText("Add Selected Tags To All Selected");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove Selected Tags From All Selected");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Add Toggle");
        jToggleButton1.setPreferredSize(new java.awt.Dimension(107, 23));

        jScrollPane1.setViewportView(tagBox);

        jButton3.setText("Add to List");

        jButton4.setText("Remove from List");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("Remove Toggle");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        tagMenu.setText("Tags");

        jMenuItem10.setText("Reload Relations");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        tagMenu.add(jMenuItem10);

        jMenu3.setText("Copy to Slot");

        copySlot1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        copySlot1.setText("Slot 1");
        copySlot1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copySlot1ActionPerformed(evt);
            }
        });
        jMenu3.add(copySlot1);

        copySlot2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        copySlot2.setText("Slot 2");
        copySlot2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copySlot2ActionPerformed(evt);
            }
        });
        jMenu3.add(copySlot2);

        copySlot3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        copySlot3.setText("Slot 3");
        copySlot3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copySlot3ActionPerformed(evt);
            }
        });
        jMenu3.add(copySlot3);

        tagMenu.add(jMenu3);

        jMenu4.setText("Paste from Slot");

        pasteSlot1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        pasteSlot1.setText("Slot 1");
        pasteSlot1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteSlot1ActionPerformed(evt);
            }
        });
        jMenu4.add(pasteSlot1);

        pasteSlot2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        pasteSlot2.setText("Slot 2");
        pasteSlot2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteSlot2ActionPerformed(evt);
            }
        });
        jMenu4.add(pasteSlot2);

        pasteSlot3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        pasteSlot3.setText("Slot 3");
        pasteSlot3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteSlot3ActionPerformed(evt);
            }
        });
        jMenu4.add(pasteSlot3);

        tagMenu.add(jMenu4);

        resetTagSlots.setText("Reset All Slots");
        resetTagSlots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTagSlotsActionPerformed(evt);
            }
        });
        tagMenu.add(resetTagSlots);

        jMenuBar1.add(tagMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(selectedItemsCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(selectionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calculateSuggestions, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(calculateSuggestions))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectedItemsCountLabel)
                    .addComponent(jButton3)
                    .addComponent(jButton4)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionComboBoxActionPerformed
        String toString = selectionComboBox.getSelectedItem().toString().trim();
        //System.out.println(evt.getActionCommand());
        if ("comboBoxEdited".equals(evt.getActionCommand())) {
            tagListModel.addElement(toString);
            if (model.getIndexOf(toString.trim()) != -1) {
                model.addElement(toString);
                loadComboBox();
            }
            reload();
        } else if ("comboBoxChanged".equals(evt.getActionCommand())) {
        }

    }//GEN-LAST:event_selectionComboBoxActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int selectedIndex = tagBox.getSelectedIndex();
        this.tagListModel.remove(selectedIndex);
     }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for (ImageWrapper img : selectedImages) {
            Enumeration<String> elements = this.tagListModel.elements();
            while (elements.hasMoreElements()) {
                String nextElement = elements.nextElement();
                //SQLHandler.addTag(nextElement);
                PreparedStatement[] addImageTagAddToBatch = ImageSQLHandler.addImageTagAddToBatch(img, nextElement);
                ImageSQLHandler.addImageTagExecuteBatch(addImageTagAddToBatch);
            }
        }
        System.out.println("Tags Added");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        for (ImageWrapper img : selectedImages) {
            Enumeration<String> elements = this.tagListModel.elements();
            while (elements.hasMoreElements()) {
                String nextElement = elements.nextElement();
                ImageSQLHandler.removeImageTag(img, nextElement);
            }
        }
        System.out.println("Tags Removed");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        ImageSQLHandler.RedoAllTagTags();
        System.out.println("Updated tags and their relations");
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void copySlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copySlot1ActionPerformed
        Gui.getTagSlot1().clear();
        Gui.getTagSlot1().addAll(Gui.getInfoPanel().getImage().returnTags());
        System.out.println("Saved to slot 1");
        copySlot1.setFont(copySlot1.getFont().deriveFont(Font.BOLD));
        pasteSlot1.setFont(copySlot1.getFont().deriveFont(Font.BOLD));
    }//GEN-LAST:event_copySlot1ActionPerformed

    private void copySlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copySlot2ActionPerformed
        Gui.getTagSlot2().clear();
        Gui.getTagSlot1().addAll(Gui.getInfoPanel().getImage().returnTags());
        System.out.println("Saved to slot 2");
        copySlot2.setFont(copySlot2.getFont().deriveFont(Font.BOLD));
        pasteSlot2.setFont(copySlot2.getFont().deriveFont(Font.BOLD));
    }//GEN-LAST:event_copySlot2ActionPerformed

    private void copySlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copySlot3ActionPerformed
        Gui.getTagSlot3().clear();
        Gui.getTagSlot3().addAll(Gui.getInfoPanel().getImage().returnTags());
        System.out.println("Saved to slot 3");
        copySlot3.setFont(copySlot3.getFont().deriveFont(Font.BOLD));
        pasteSlot3.setFont(copySlot3.getFont().deriveFont(Font.BOLD));
    }//GEN-LAST:event_copySlot3ActionPerformed

    private void pasteSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteSlot1ActionPerformed
        tagListModel.clear();
        for (String t : Gui.getTagSlot1()) {
            tagListModel.addElement(t);
        }
        System.out.println("Pasted from slot 1");
    }//GEN-LAST:event_pasteSlot1ActionPerformed

    private void pasteSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteSlot2ActionPerformed
        tagListModel.clear();
        for (String t : Gui.getTagSlot2()) {
            tagListModel.addElement(t);
        }
        System.out.println("Pasted from slot 2");
    }//GEN-LAST:event_pasteSlot2ActionPerformed

    private void pasteSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteSlot3ActionPerformed
        tagListModel.clear();
        for (String t : Gui.getTagSlot3()) {
            tagListModel.addElement(t);
        }
        System.out.println("Pasted from slot 3");
    }//GEN-LAST:event_pasteSlot3ActionPerformed

    private void resetTagSlotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTagSlotsActionPerformed
        Gui.getTagSlot1().clear();
        Gui.getTagSlot2().clear();
        Gui.getTagSlot3().clear();
        copySlot1.setFont(copySlot1.getFont().deriveFont(Font.PLAIN));
        copySlot2.setFont(copySlot1.getFont().deriveFont(Font.PLAIN));
        copySlot3.setFont(copySlot1.getFont().deriveFont(Font.PLAIN));
        pasteSlot1.setFont(copySlot1.getFont().deriveFont(Font.PLAIN));
        pasteSlot2.setFont(copySlot1.getFont().deriveFont(Font.PLAIN));
        pasteSlot3.setFont(copySlot1.getFont().deriveFont(Font.PLAIN));
    }//GEN-LAST:event_resetTagSlotsActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox calculateSuggestions;
    private javax.swing.JMenuItem copySlot1;
    private javax.swing.JMenuItem copySlot2;
    private javax.swing.JMenuItem copySlot3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JMenuItem pasteSlot1;
    private javax.swing.JMenuItem pasteSlot2;
    private javax.swing.JMenuItem pasteSlot3;
    private javax.swing.JMenuItem resetTagSlots;
    private javax.swing.JLabel selectedItemsCountLabel;
    DefaultComboBoxModel model = new DefaultComboBoxModel();
    private javax.swing.JComboBox<String> selectionComboBox;
    DefaultListModel<String> suggestionListModel = new DefaultListModel<>();
    private javax.swing.JList<String> suggestionList;
    DefaultListModel<String> tagListModel = new DefaultListModel<>();
    private javax.swing.JList<String> tagBox;
    private javax.swing.JMenu tagMenu;
    // End of variables declaration//GEN-END:variables
}
