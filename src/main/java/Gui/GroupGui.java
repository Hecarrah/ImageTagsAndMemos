/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui;

import Data.*;
import Enum.CardType;
import Enum.Job;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;

/**
 *
 * @author Peter
 */
public class GroupGui extends javax.swing.JInternalFrame {

    private HashMap<String, DataConnection> ConMap = new HashMap<>();
    private Card group = new Card("", CardType.Group, null);
    private MainWindow parent;

    public GroupGui(MainWindow pa, Card p) {
        this.parent = pa;
        initComponents();
        if (p != null) {
            this.group = p;
        }
        setUpExistingFields(p);
        setUpComboBox();
    }

    public GroupGui() {
        initComponents();
    }

    private void setUpComboBox() {
        List<Card> persons = Deck.returnPersonCards();
        List<Card> fcs = Deck.returnFreeCompanies();
        List<Card> groups = Deck.returnGroups();

        persons.forEach(p -> this.comboBox.addItem(p.getName()));
        fcs.forEach(p -> this.comboBox.addItem(p.getName()));
        groups.forEach(p -> this.comboBox.addItem(p.getName()));
    }

    private void color() {
        for (int i = 0; i < this.listModel.size(); i++) {
            if (Deck.personFromName(this.listModel.get(i)) != null) {
                Card person = Deck.personFromName(this.listModel.get(i));
                if (person.getMainJob().equals(Job.SCH)) {
                    //color
                }
            }
        }
    }

    private void setUpExistingFields(Card p) {
        try {
            this.nameField.setText(p.getName());
            this.linkField.setText(p.getLink());

            List<String> personStringList = new ArrayList<>();
            for (DataConnection c : p.getConnections()) {
                if (c.getA().getId().equals(p.getId())) {
                    ConMap.put(c.getB().getName(), c);
                    personStringList.add(c.getB().getName());
                } else if (c.getB().getId().equals(p.getId())) {
                    ConMap.put(c.getA().getName(), c);
                    personStringList.add(c.getA().getName());
                }
            }
            String[] strarray = personStringList.toArray(new String[0]);

//            List<String> fcStringList = new ArrayList<>();
//            for (DataConnection c : p.getConnections()) {
//                if (c.getA().getName().equals(p.getName())) {
//                    ConMap.put(c.getB().getName(), c);
//                    fcStringList.add(c.getB().getName());
//                } else if (c.getB().getName().equals(p.getName())) {
//                    ConMap.put(c.getA().getName(), c);
//                    fcStringList.add(c.getA().getName());
//                }
//            }
//            String[] strarray2 = fcStringList.toArray(new String[0]);
//            String[] both = Stream.concat(Arrays.stream(strarray), Arrays.stream(strarray2))
//                    .toArray(String[]::new);
            for (String s : strarray) {
                this.listModel.addElement(s);
            }
            this.setTitle(p.getId());
            //this.connectionsList.setListData(strarray);

        } catch (NullPointerException ex) {
            System.out.println("null group" + ex);
        }
    }

    private Card saveGroup() {
        ArrayList<DataConnection> connections = new ArrayList<>();
//        if (group.getConnections().size() > 0) {
//            connections = group.getConnections();
//        }
        DataConnection dc;
        String name = this.nameField.getText();
        String link = this.linkField.getText();
        for (int i = 0; i < this.listModel.size(); i++) {
            System.out.println((String) this.listModel.get(i));
            dc = (this.ConMap.get(((String) this.listModel.get(i))));
            if (!connections.contains(dc)) {
                connections.add(dc);
            }
        }
        Card newGroup = new Card(name, link, connections, group.getId());
//        newGroup.generateId();
        Deck.addGroup(newGroup);
        return newGroup;
    }

    public void loadGroup(Card p) {
        setUpExistingFields(p);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        connectionsList = new javax.swing.JList<>(listModel);
        comboBox = new javax.swing.JComboBox<>();
        addToList = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        linkField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        openLink = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setMinimumSize(new java.awt.Dimension(347, 294));

        connectionsList.setDragEnabled(true);
        jScrollPane1.setViewportView(connectionsList);

        addToList.setText("A");
        addToList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToListActionPerformed(evt);
            }
        });

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Name: ");

        jLabel2.setText("Link: ");

        openLink.setText("Open");
        openLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openLinkActionPerformed(evt);
            }
        });

        jButton1.setText("D");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(linkField))
                            .addComponent(comboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addToList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openLink, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linkField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(openLink))
                .addGap(9, 9, 9)
                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addToList, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        saveGroup();
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void addToListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToListActionPerformed
        String toString = this.comboBox.getSelectedItem().toString();
        group.setName(this.nameField.getText());
        DataConnection dc = new DataConnection(Deck.personFromName(toString), group, "", "",false);
        if (dc.getA() == null) {
            dc = new DataConnection(Deck.fcFromName(toString), group, "", "",false);
        }
        if (dc.getA() == null) {
            dc = new DataConnection(Deck.groupFromName(toString), group, "", "",false);
        }
        ConMap.put(toString, dc);
        this.listModel.addElement(toString);
        System.out.println(listModel.getSize());
    }//GEN-LAST:event_addToListActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.listModel.remove(this.connectionsList.getSelectedIndex());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void openLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openLinkActionPerformed
        try {
            Desktop.getDesktop().browse(new URI(this.linkField.getText()));
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(CharacterCreator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openLinkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToList;
    private javax.swing.JComboBox<String> comboBox;
    DefaultListModel<String> listModel = new DefaultListModel<>();
    private javax.swing.JList<String> connectionsList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField linkField;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton openLink;
    // End of variables declaration//GEN-END:variables
}
