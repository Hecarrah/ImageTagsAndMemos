package Gui;

import Algorithms.ImageProcessing;
import Main.Main;
import com.sun.imageio.plugins.gif.GIFImageReader;
import com.sun.imageio.plugins.gif.GIFImageReaderSpi;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.swing.ImageIcon;
import org.imgscalr.Scalr;
import org.imgscalr.Scalr.Mode;
//import org.opencv.imgcodecs.Imgcodecs;

/**
 *
 * @author Peter
 */
public class ImagePanel extends javax.swing.JPanel {

    /**
     * Creates new form ImagePanel
     */
    private BufferedImage bgImage;
    private Image scaled;
    private File sourceFile;

    public ImagePanel() {
        initComponents();
    }

    public void draw(File imageFile) {
        //System.out.println("Drawing on Panel: ");
        try {
            setImageSource(imageFile);
        } catch (IOException ex) {
            Logger.getLogger(ImagePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void invalidate() {
        super.invalidate();
        resizeImage();
    }

    public void setImageSource(File source) throws IOException {
        this.sourceFile = source;
        ImageReader ir = new GIFImageReader(new GIFImageReaderSpi());
        if (source != null) {
            bgImage = ImageIO.read(source);
            resizeImage();
//        } else if (source != null && source.getName().endsWith(".gif")) {
//            ir.setInput(ImageIO.createImageInputStream(source));
//            bgImage = ir.read(0);
//            resizeImage();
        }
        else {
            bgImage = null;
        }
    }

    @Override
    public Dimension getPreferredSize() {
        return bgImage == null ? new Dimension(200, 200) : new Dimension(bgImage.getWidth(), bgImage.getHeight());
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (scaled != null) {
            Graphics2D g2d = (Graphics2D) g.create();
            int x = (getWidth() - scaled.getWidth(this)) / 2;
            int y = (getHeight() - scaled.getHeight(this)) / 2;
            g2d.drawImage(scaled, x, y, this);
            g2d.dispose();
        }
    }

    protected void resizeImage() {
        long currentTimeMillis = System.currentTimeMillis();
        if (scaled != null) {
            scaled.flush();
        }
        //System.gc();
        if (bgImage != null) {
            if (sourceFile.getName().endsWith(".gif")) {
                scaled = new ImageIcon(sourceFile.toString()).getImage();
                Dimension scaledDimension = Main.getImageProcessing().getScaledDimension(new Dimension(bgImage.getWidth(), bgImage.getHeight()), this.getSize());
                scaled = scaled.getScaledInstance(scaledDimension.width, scaledDimension.height, 0);
            } else {
                Dimension scaledDimension = Main.getImageProcessing().getScaledDimension(new Dimension(bgImage.getWidth(), bgImage.getHeight()), this.getSize());
                scaled = resizeToBig(bgImage, scaledDimension.width, scaledDimension.height);
            }
        }
        if (Main.debugMode) {
            System.out.println("-> Resizing took: " + (System.currentTimeMillis() - currentTimeMillis) + " ms");
        }
    }

    private BufferedImage resizeToBig(BufferedImage originalImage, int biggerWidth, int biggerHeight) {
        BufferedImage resized = Scalr.resize(originalImage, Scalr.Method.QUALITY, Mode.FIT_EXACT, biggerWidth, biggerHeight);
        return resized;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
