package Gui;

import DataStructures.ImageWrapper;
import DataStructures.ImageWrapperFilter;
import IO.ImageSQLHandler;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListModel;
import javax.swing.KeyStroke;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Peter
 */
public class FilterWindow extends javax.swing.JInternalFrame {

    /**
     * Creates new form InfoWindow
     */
    Path pathPath = Paths.get("G:/Library/E/Single Images/Sorting Batches");
    File rootFolder = new File(pathPath.toUri());
    ImageWrapper image = new ImageWrapper();
    ImageWrapperFilter filter;
    Gui parent;

    private final String DEL = "Del";
    private Action del = new AbstractAction(DEL) {
        @Override
        public void actionPerformed(ActionEvent e) {
            //System.out.println("remove");
            int selectedIndex = tagBox.getSelectedIndex();
            tagListModel.remove(selectedIndex);
        }
    };

    public FilterWindow(Gui p) {
        parent = p;
        this.tagListModel.clear();
        initComponents();
        loadComboBox();
        setKeybinds();
        this.setTitle("Filter!");
        load();
    }

    public void setKeybinds() {
        this.getInputMap().put(
                KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), DEL);
        this.getInputMap().put(
                KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), DEL);
        this.getActionMap().put(DEL, del);
        //System.out.println("keybinds set");
    }

    private void loadComboBox() {
        try {
            ImageSQLHandler.getTags();
            ImageSQLHandler.getTagQuery().beforeFirst();
            while (ImageSQLHandler.getTagQuery().next()) {
                String string = ImageSQLHandler.getTagQuery().getString("name");
                selectionComboBox.addItem(string);
                BLselectionComboBox.addItem(string);
            }
        } catch (SQLException ex) {
            Logger.getLogger(FilterWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void load() {
        setKeybinds();
        Object[] filterArray = ImageSQLHandler.getFilterArray();
        try {
            ArrayList<String> tags = (ArrayList<String>) filterArray[3];
            for (String s : tags) {
                this.tagListModel.addElement(s);
            }
        } catch (Exception ex) {
            System.out.println("No whitelisted tags specified in filter");
        }
        try {
            ArrayList<String> tags = (ArrayList<String>) filterArray[4];
            for (String s : tags) {
                this.BLtagListModel.addElement(s);
            }
        } catch (Exception ex) {
            System.out.println("No blacklisted tags specified in filter");
        }
        try {
            this.suffixField.setText((String) filterArray[0]);
        } catch (Exception ex) {
            System.out.println("No suffix specified in filter");
        }
        try {
            this.countBegin.setText((int) filterArray[1] + "");
            this.countEnd.setText((int) filterArray[2] + "");
        } catch (Exception ex) {
            System.out.println("No tagCount in filter");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        selectionComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagBox = new javax.swing.JList<>(tagListModel);
        jLabel1 = new javax.swing.JLabel();
        suffixField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        countEnd = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        countBegin = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        BLremoveButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        BLtagBox = new javax.swing.JList<>(BLtagListModel);
        jLabel5 = new javax.swing.JLabel();
        BLselectionComboBox = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setClosable(true);

        selectionComboBox.setEditable(true);
        AutoCompleteDecorator.decorate(selectionComboBox);
        selectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionComboBoxActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(tagBox);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Filter Whitelisted Tags");

        jLabel2.setText("Suffix");

        removeButton.setText("R");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        countEnd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        countEnd.setText("999");
        countEnd.setToolTipText("Set either to -1 to select all untagged.");
        countEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countEndActionPerformed(evt);
            }
        });

        jLabel3.setText("Tag Count:");

        countBegin.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        countBegin.setText("0");
        countBegin.setToolTipText("Set either to -1 to select all untagged.");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("<");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        BLremoveButton.setText("R");
        BLremoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLremoveButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(BLtagBox);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Filter Blacklisted Tags");

        BLselectionComboBox.setEditable(true);
        AutoCompleteDecorator.decorate(BLselectionComboBox);
        BLselectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLselectionComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(suffixField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectionComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 185, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(BLremoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BLselectionComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countBegin, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suffixField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(countEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(countBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(selectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BLselectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addComponent(BLremoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Apply Filter");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Reset Filter");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionComboBoxActionPerformed
        String toString = selectionComboBox.getSelectedItem().toString();
        if ("comboBoxEdited".equals(evt.getActionCommand())) {
            tagListModel.addElement(toString);
            selectionComboBox.addItem(toString);
        } else if ("comboBoxChanged".equals(evt.getActionCommand())) {
        }
    }//GEN-LAST:event_selectionComboBoxActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Object[] array = new Object[5];
        Enumeration<String> elements = tagListModel.elements();
        ArrayList<String> tags = new ArrayList<>();
        while (elements.hasMoreElements()) {
            tags.add(elements.nextElement());
        }
        Enumeration<String> BLelements = BLtagListModel.elements();
        ArrayList<String> BLtags = new ArrayList<>();
        while (BLelements.hasMoreElements()) {
            BLtags.add(BLelements.nextElement());
        }
        array[0] = this.suffixField.getText();
        array[1] = Integer.parseInt(this.countBegin.getText().trim());
        array[2] = Integer.parseInt(this.countEnd.getText().trim());
        array[3] = tags;
        array[4] = BLtags;
        ImageSQLHandler.getFilteredImages(array);
        parent.resetImageViewer();
        try {
            parent.getThumbImageForm().dispose();
        } catch (Exception ex) {
            System.out.println("Exception during tlp reload after applying filters (Mostlikely due to no thumbList visible)");
        }
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //Data.resetFilters();
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        //System.out.println("remove");
        int selectedIndex = tagBox.getSelectedIndex();
        tagListModel.remove(selectedIndex);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void countEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countEndActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_countEndActionPerformed

    private void BLremoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLremoveButtonActionPerformed
        //System.out.println("remove");
        int selectedIndex = BLtagBox.getSelectedIndex();
        BLtagListModel.remove(selectedIndex);
    }//GEN-LAST:event_BLremoveButtonActionPerformed

    private void BLselectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLselectionComboBoxActionPerformed
        String toString = BLselectionComboBox.getSelectedItem().toString();
        if ("comboBoxEdited".equals(evt.getActionCommand())) {
            BLtagListModel.addElement(toString);
            BLselectionComboBox.addItem(toString);
        } else if ("comboBoxChanged".equals(evt.getActionCommand())) {
        }
    }//GEN-LAST:event_BLselectionComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BLremoveButton;
    private javax.swing.JComboBox<String> BLselectionComboBox;
    DefaultListModel<String> BLtagListModel = new DefaultListModel<>();
    private javax.swing.JList<String> BLtagBox;
    private javax.swing.JFormattedTextField countBegin;
    private javax.swing.JFormattedTextField countEnd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeButton;
    private javax.swing.JComboBox<String> selectionComboBox;
    private javax.swing.JTextField suffixField;
    DefaultListModel<String> tagListModel = new DefaultListModel<>();
    private javax.swing.JList<String> tagBox;
    // End of variables declaration//GEN-END:variables
}
